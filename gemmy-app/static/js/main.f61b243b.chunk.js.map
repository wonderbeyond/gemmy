{"version":3,"sources":["lib/gemmy.js","App.js","lib/utils.js","serviceWorker.js","index.js","cat.svg"],"names":["GEMMY_BASE_URL","process","REACT_APP_GEMMY_BASE_URL","Error","GemmyClient","Object","classCallCheck","this","createClass","key","value","fetch","concat","then","resp","json","chunkIndex","s","toString","padStart","slice","App","props","_this","possibleConstructorReturn","getPrototypeOf","call","state","hitGem","gm","fetchIndex","indexData","console","debug","min","max","hitNum","total_count","Math","ceil","floor","random","pageNum","pagination","size","inPageOffset","getChunkURL","text","split","setState","react_default","a","createElement","className","src","logo","alt","dangerouslySetInnerHTML","__html","GEM","snarkdown","replace","href","rel","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"4RAEaA,EAAiBC,8CAAYC,yBAE1C,IAAKF,EACH,MAAMG,MAAM,gDAGP,IAAMC,EAAb,oBAAAA,IAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAH,GAAA,OAAAC,OAAAG,EAAA,EAAAH,CAAAD,EAAA,EAAAK,IAAA,aAAAC,MAAA,WAEI,OAAOC,MAAK,GAAAC,OAAIZ,EAAJ,2BAA4Ca,KAAK,SAAAC,GAE3D,OADWA,EAAKC,WAHtB,CAAAN,IAAA,cAAAC,MAAA,SAQcM,GACV,IAAIC,EAAID,EAAWE,WAAWC,SAAS,EAAG,KAC1C,SAAAP,OAAUZ,EAAV,iBAAAY,OAAwCK,EAAEG,MAAM,EAAG,GAAnD,KAAAR,OAAyDK,EAAEG,MAAM,EAAG,GAApE,KAAAR,OAA0EK,EAAEG,MAAM,QAVtFhB,EAAA,OCyCeiB,cAxCb,SAAAA,EAAYC,GAAO,IAAAC,EAAAlB,OAAAC,EAAA,EAAAD,CAAAE,KAAAc,IACjBE,EAAAlB,OAAAmB,EAAA,EAAAnB,CAAAE,KAAAF,OAAAoB,EAAA,EAAApB,CAAAgB,GAAAK,KAAAnB,KAAMe,KACDK,MAAQ,CACXC,OAAQ,IAGV,IAAIC,EAAK,IAAIzB,EANI,OAOjByB,EAAGC,aAAajB,KAAK,SAAAkB,GACnBC,QAAQC,MAAM,kBAAmBF,GACjC,IClBoBG,EAAKC,EDkBrBC,GClBgBF,EDkBG,EClBEC,EDkBCJ,EAAUM,YCjBtCH,EAAMI,KAAKC,KAAKL,GAChBC,EAAMG,KAAKE,MAAML,GACVG,KAAKE,MAAMF,KAAKG,UAAYN,EAAMD,EAAM,IAAMA,GDgB/CQ,EAAUJ,KAAKC,KAAKH,EAASL,EAAUY,WAAWC,MAClDC,EAAgBT,EAASL,EAAUY,WAAWC,KAAQ,GACpC,IAAlBC,IACFA,EAAed,EAAUY,WAAWC,KAAO,GAE7CZ,QAAQC,MAAR,WAAArB,OAAyBwB,EAAzB,cAAAxB,OAA4C8B,EAA5C,UAAA9B,OAA4DiC,EAAe,IAC3ElC,MAAK,GAAAC,OAAIiB,EAAGiB,YAAYJ,EAAU,KAAM7B,KAAK,SAAAC,GAC3CA,EAAKiC,OAAOlC,KAAK,SAAAkC,GACf,IACInB,EADQmB,EAAKC,MAAM,MACJH,GACnBb,QAAQC,MAAM,OAAQL,GACtBL,EAAK0B,SAAS,CAACrB,OAAQA,UArBZL,wEA2BjB,OAAQ2B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACrBH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,OAAKE,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzCN,EAAAC,EAAAC,cAAA,KAAGK,wBAAyB,CAACC,QDjBZC,ECiB6BpD,KAAKoB,MAAMC,ODhBxDgC,YAAUD,EAAIE,QAAQ,mBAAoB,MCgByB,cAEpEX,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAb,cACaH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,WAAWS,KAAK,wCAAwCC,IAAI,uBAAzE,yBDpBd,IAAkBJ,SCdPK,aEIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrB,EAAAC,EAAAC,cAACoB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhE,KAAK,SAAAiE,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.f61b243b.chunk.js","sourcesContent":["// I want a build failure if REACT_APP_GEMMY_BASE_URL not defind in env\nimport snarkdown from 'snarkdown';\nexport const GEMMY_BASE_URL = process.env.REACT_APP_GEMMY_BASE_URL\n\nif (!GEMMY_BASE_URL) {\n  throw Error('REACT_APP_GEMMY_BASE_URL is required in env!')\n}\n\nexport class GemmyClient {\n  fetchIndex() {\n    return fetch(`${GEMMY_BASE_URL}/gems/gemmy-index.json`).then(resp => {\n      let data = resp.json()\n      return data\n    })\n  }\n\n  getChunkURL(chunkIndex) {\n    let s = chunkIndex.toString().padStart(5, '0')\n    return `${GEMMY_BASE_URL}/gems/chunks/${s.slice(0, 2)}/${s.slice(2, 4)}/${s.slice(4)}`\n  }\n}\n\nexport function GEM2Html(GEM) {\n  return snarkdown(GEM.replace(/^\\s*\\[[\\w\\s-]+\\]/, ''))\n}\n","import React, {Component} from 'react';\n// import logo from './logo.svg';\nimport logo from './cat.svg';\nimport './App.css';\n\nimport {GemmyClient, GEMMY_BASE_URL, GEM2Html} from './lib/gemmy';\nimport {randomInt} from './lib/utils';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hitGem: ''\n    }\n\n    let gm = new GemmyClient()\n    gm.fetchIndex().then(indexData => {\n      console.debug('Got index data:', indexData)\n      let hitNum = randomInt(1, indexData.total_count) // starts from 1\n      let pageNum = Math.ceil(hitNum / indexData.pagination.size)  // start from 1\n      let inPageOffset = (hitNum % indexData.pagination.size) - 1 // start from 0\n      if (inPageOffset === -1) {\n        inPageOffset = indexData.pagination.size - 1\n      }\n      console.debug(`Hit gem#${hitNum}, at page#${pageNum} line#${inPageOffset + 1}`)\n      fetch(`${gm.getChunkURL(pageNum - 1)}`).then(resp => {\n        resp.text().then(text => {\n          let lines = text.split('\\n')\n          let hitGem = lines[inPageOffset]\n          console.debug('GEM:', hitGem);\n          this.setState({hitGem: hitGem});\n        })\n      })\n    })\n  }\n  render() {\n    return (<div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n        <p dangerouslySetInnerHTML={{__html: GEM2Html(this.state.hitGem) || \"å–µ~\"}}>\n        </p>\n        <p className=\"credit-info\">\n          Powered by <a className=\"App-link\" href=\"https://github.com/wonderbeyond/gemmy\" rel=\"noopener noreferrer\">wonderbeyond/gemmy</a>\n        </p>\n      </header>\n    </div>);\n  }\n}\n\nexport default App;\n","export function randomInt(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/cat.480c5e07.svg\";"],"sourceRoot":""}